// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.2
// source: tradingnode2.proto

package tradingpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// CtrlCondition - control condition
type CtrlCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indicator     string    `protobuf:"bytes,1,opt,name=indicator,proto3" json:"indicator,omitempty"`
	Vals          []float32 `protobuf:"fixed32,2,rep,packed,name=vals,proto3" json:"vals,omitempty"`
	Operators     []string  `protobuf:"bytes,3,rep,name=operators,proto3" json:"operators,omitempty"`         // 操作符，按道理应该和 vals 长度一样，大于小于等于
	CombCondition string    `protobuf:"bytes,4,opt,name=combCondition,proto3" json:"combCondition,omitempty"` // 组合条件，如果有多个操作条件，这里是 与或非
}

func (x *CtrlCondition) Reset() {
	*x = CtrlCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingnode2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtrlCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtrlCondition) ProtoMessage() {}

func (x *CtrlCondition) ProtoReflect() protoreflect.Message {
	mi := &file_tradingnode2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtrlCondition.ProtoReflect.Descriptor instead.
func (*CtrlCondition) Descriptor() ([]byte, []int) {
	return file_tradingnode2_proto_rawDescGZIP(), []int{0}
}

func (x *CtrlCondition) GetIndicator() string {
	if x != nil {
		return x.Indicator
	}
	return ""
}

func (x *CtrlCondition) GetVals() []float32 {
	if x != nil {
		return x.Vals
	}
	return nil
}

func (x *CtrlCondition) GetOperators() []string {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *CtrlCondition) GetCombCondition() string {
	if x != nil {
		return x.CombCondition
	}
	return ""
}

// Strategy - strategy
type Strategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Asset    *Asset           `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Buy      []*CtrlCondition `protobuf:"bytes,3,rep,name=buy,proto3" json:"buy,omitempty"`
	Sell     []*CtrlCondition `protobuf:"bytes,4,rep,name=sell,proto3" json:"sell,omitempty"`
	Stoploss []*CtrlCondition `protobuf:"bytes,5,rep,name=stoploss,proto3" json:"stoploss,omitempty"`
}

func (x *Strategy) Reset() {
	*x = Strategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingnode2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Strategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strategy) ProtoMessage() {}

func (x *Strategy) ProtoReflect() protoreflect.Message {
	mi := &file_tradingnode2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strategy.ProtoReflect.Descriptor instead.
func (*Strategy) Descriptor() ([]byte, []int) {
	return file_tradingnode2_proto_rawDescGZIP(), []int{1}
}

func (x *Strategy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Strategy) GetAsset() *Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *Strategy) GetBuy() []*CtrlCondition {
	if x != nil {
		return x.Buy
	}
	return nil
}

func (x *Strategy) GetSell() []*CtrlCondition {
	if x != nil {
		return x.Sell
	}
	return nil
}

func (x *Strategy) GetStoploss() []*CtrlCondition {
	if x != nil {
		return x.Stoploss
	}
	return nil
}

// PNLDataValue -
type PNLDataValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts    int64   `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PNLDataValue) Reset() {
	*x = PNLDataValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingnode2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNLDataValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNLDataValue) ProtoMessage() {}

func (x *PNLDataValue) ProtoReflect() protoreflect.Message {
	mi := &file_tradingnode2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNLDataValue.ProtoReflect.Descriptor instead.
func (*PNLDataValue) Descriptor() ([]byte, []int) {
	return file_tradingnode2_proto_rawDescGZIP(), []int{2}
}

func (x *PNLDataValue) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *PNLDataValue) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// PNLData -
type PNLData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Asset                *Asset          `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Values               []*PNLDataValue `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	MaxDrawdown          float32         `protobuf:"fixed32,4,opt,name=maxDrawdown,proto3" json:"maxDrawdown,omitempty"`
	MaxDrawdownStartTs   int64           `protobuf:"varint,5,opt,name=maxDrawdownStartTs,proto3" json:"maxDrawdownStartTs,omitempty"`
	MaxDrawdownEndTs     int64           `protobuf:"varint,6,opt,name=maxDrawdownEndTs,proto3" json:"maxDrawdownEndTs,omitempty"`
	MaxDrawup            float32         `protobuf:"fixed32,7,opt,name=maxDrawup,proto3" json:"maxDrawup,omitempty"`
	MaxDrawupStartTs     int64           `protobuf:"varint,8,opt,name=maxDrawupStartTs,proto3" json:"maxDrawupStartTs,omitempty"`
	MaxDrawupEndTs       int64           `protobuf:"varint,9,opt,name=maxDrawupEndTs,proto3" json:"maxDrawupEndTs,omitempty"`
	Sharpe               float32         `protobuf:"fixed32,10,opt,name=sharpe,proto3" json:"sharpe,omitempty"`
	AnnualizedReturns    float32         `protobuf:"fixed32,11,opt,name=annualizedReturns,proto3" json:"annualizedReturns,omitempty"`
	AnnualizedVolatility float32         `protobuf:"fixed32,12,opt,name=annualizedVolatility,proto3" json:"annualizedVolatility,omitempty"`
	TotalReturns         float32         `protobuf:"fixed32,13,opt,name=totalReturns,proto3" json:"totalReturns,omitempty"`
	Variance             float32         `protobuf:"fixed32,14,opt,name=variance,proto3" json:"variance,omitempty"`
	BuyTimes             int32           `protobuf:"varint,15,opt,name=buyTimes,proto3" json:"buyTimes,omitempty"`
	SellTimes            int32           `protobuf:"varint,16,opt,name=sellTimes,proto3" json:"sellTimes,omitempty"`
	StoplossTimes        int32           `protobuf:"varint,17,opt,name=stoplossTimes,proto3" json:"stoplossTimes,omitempty"`
	MaxUpDayTs           int64           `protobuf:"varint,18,opt,name=maxUpDayTs,proto3" json:"maxUpDayTs,omitempty"`
	MaxPerUpDay          float32         `protobuf:"fixed32,19,opt,name=maxPerUpDay,proto3" json:"maxPerUpDay,omitempty"`
	MaxDownDayTs         int64           `protobuf:"varint,20,opt,name=maxDownDayTs,proto3" json:"maxDownDayTs,omitempty"`
	MaxPerDownDay        float32         `protobuf:"fixed32,21,opt,name=maxPerDownDay,proto3" json:"maxPerDownDay,omitempty"`
	MaxUpWeekTs          int64           `protobuf:"varint,22,opt,name=maxUpWeekTs,proto3" json:"maxUpWeekTs,omitempty"`
	MaxPerUpWeek         float32         `protobuf:"fixed32,23,opt,name=maxPerUpWeek,proto3" json:"maxPerUpWeek,omitempty"`
	MaxDownWeekTs        int64           `protobuf:"varint,24,opt,name=maxDownWeekTs,proto3" json:"maxDownWeekTs,omitempty"`
	MaxPerDownWeek       float32         `protobuf:"fixed32,25,opt,name=maxPerDownWeek,proto3" json:"maxPerDownWeek,omitempty"`
	MaxUpMonthTs         int64           `protobuf:"varint,26,opt,name=maxUpMonthTs,proto3" json:"maxUpMonthTs,omitempty"`
	MaxPerUpMonth        float32         `protobuf:"fixed32,27,opt,name=maxPerUpMonth,proto3" json:"maxPerUpMonth,omitempty"`
	MaxDownMonthTs       int64           `protobuf:"varint,28,opt,name=maxDownMonthTs,proto3" json:"maxDownMonthTs,omitempty"`
	MaxPerDownMonth      float32         `protobuf:"fixed32,29,opt,name=maxPerDownMonth,proto3" json:"maxPerDownMonth,omitempty"`
	MaxUpYearTs          int64           `protobuf:"varint,30,opt,name=maxUpYearTs,proto3" json:"maxUpYearTs,omitempty"`
	MaxPerUpYear         float32         `protobuf:"fixed32,31,opt,name=maxPerUpYear,proto3" json:"maxPerUpYear,omitempty"`
	MaxDownYearTs        int64           `protobuf:"varint,32,opt,name=maxDownYearTs,proto3" json:"maxDownYearTs,omitempty"`
	MaxPerDownYear       float32         `protobuf:"fixed32,33,opt,name=maxPerDownYear,proto3" json:"maxPerDownYear,omitempty"`
}

func (x *PNLData) Reset() {
	*x = PNLData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingnode2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNLData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNLData) ProtoMessage() {}

func (x *PNLData) ProtoReflect() protoreflect.Message {
	mi := &file_tradingnode2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNLData.ProtoReflect.Descriptor instead.
func (*PNLData) Descriptor() ([]byte, []int) {
	return file_tradingnode2_proto_rawDescGZIP(), []int{3}
}

func (x *PNLData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PNLData) GetAsset() *Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *PNLData) GetValues() []*PNLDataValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PNLData) GetMaxDrawdown() float32 {
	if x != nil {
		return x.MaxDrawdown
	}
	return 0
}

func (x *PNLData) GetMaxDrawdownStartTs() int64 {
	if x != nil {
		return x.MaxDrawdownStartTs
	}
	return 0
}

func (x *PNLData) GetMaxDrawdownEndTs() int64 {
	if x != nil {
		return x.MaxDrawdownEndTs
	}
	return 0
}

func (x *PNLData) GetMaxDrawup() float32 {
	if x != nil {
		return x.MaxDrawup
	}
	return 0
}

func (x *PNLData) GetMaxDrawupStartTs() int64 {
	if x != nil {
		return x.MaxDrawupStartTs
	}
	return 0
}

func (x *PNLData) GetMaxDrawupEndTs() int64 {
	if x != nil {
		return x.MaxDrawupEndTs
	}
	return 0
}

func (x *PNLData) GetSharpe() float32 {
	if x != nil {
		return x.Sharpe
	}
	return 0
}

func (x *PNLData) GetAnnualizedReturns() float32 {
	if x != nil {
		return x.AnnualizedReturns
	}
	return 0
}

func (x *PNLData) GetAnnualizedVolatility() float32 {
	if x != nil {
		return x.AnnualizedVolatility
	}
	return 0
}

func (x *PNLData) GetTotalReturns() float32 {
	if x != nil {
		return x.TotalReturns
	}
	return 0
}

func (x *PNLData) GetVariance() float32 {
	if x != nil {
		return x.Variance
	}
	return 0
}

func (x *PNLData) GetBuyTimes() int32 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

func (x *PNLData) GetSellTimes() int32 {
	if x != nil {
		return x.SellTimes
	}
	return 0
}

func (x *PNLData) GetStoplossTimes() int32 {
	if x != nil {
		return x.StoplossTimes
	}
	return 0
}

func (x *PNLData) GetMaxUpDayTs() int64 {
	if x != nil {
		return x.MaxUpDayTs
	}
	return 0
}

func (x *PNLData) GetMaxPerUpDay() float32 {
	if x != nil {
		return x.MaxPerUpDay
	}
	return 0
}

func (x *PNLData) GetMaxDownDayTs() int64 {
	if x != nil {
		return x.MaxDownDayTs
	}
	return 0
}

func (x *PNLData) GetMaxPerDownDay() float32 {
	if x != nil {
		return x.MaxPerDownDay
	}
	return 0
}

func (x *PNLData) GetMaxUpWeekTs() int64 {
	if x != nil {
		return x.MaxUpWeekTs
	}
	return 0
}

func (x *PNLData) GetMaxPerUpWeek() float32 {
	if x != nil {
		return x.MaxPerUpWeek
	}
	return 0
}

func (x *PNLData) GetMaxDownWeekTs() int64 {
	if x != nil {
		return x.MaxDownWeekTs
	}
	return 0
}

func (x *PNLData) GetMaxPerDownWeek() float32 {
	if x != nil {
		return x.MaxPerDownWeek
	}
	return 0
}

func (x *PNLData) GetMaxUpMonthTs() int64 {
	if x != nil {
		return x.MaxUpMonthTs
	}
	return 0
}

func (x *PNLData) GetMaxPerUpMonth() float32 {
	if x != nil {
		return x.MaxPerUpMonth
	}
	return 0
}

func (x *PNLData) GetMaxDownMonthTs() int64 {
	if x != nil {
		return x.MaxDownMonthTs
	}
	return 0
}

func (x *PNLData) GetMaxPerDownMonth() float32 {
	if x != nil {
		return x.MaxPerDownMonth
	}
	return 0
}

func (x *PNLData) GetMaxUpYearTs() int64 {
	if x != nil {
		return x.MaxUpYearTs
	}
	return 0
}

func (x *PNLData) GetMaxPerUpYear() float32 {
	if x != nil {
		return x.MaxPerUpYear
	}
	return 0
}

func (x *PNLData) GetMaxDownYearTs() int64 {
	if x != nil {
		return x.MaxDownYearTs
	}
	return 0
}

func (x *PNLData) GetMaxPerDownYear() float32 {
	if x != nil {
		return x.MaxPerDownYear
	}
	return 0
}

// RequestServerInfo - request server info
type RequestServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRequest *BasicRequestData `protobuf:"bytes,1,opt,name=basicRequest,proto3" json:"basicRequest,omitempty"`
}

func (x *RequestServerInfo) Reset() {
	*x = RequestServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingnode2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestServerInfo) ProtoMessage() {}

func (x *RequestServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tradingnode2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestServerInfo.ProtoReflect.Descriptor instead.
func (*RequestServerInfo) Descriptor() ([]byte, []int) {
	return file_tradingnode2_proto_rawDescGZIP(), []int{4}
}

func (x *RequestServerInfo) GetBasicRequest() *BasicRequestData {
	if x != nil {
		return x.BasicRequest
	}
	return nil
}

type ReplyServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxTasks int32 `protobuf:"varint,1,opt,name=maxTasks,proto3" json:"maxTasks,omitempty"`
	CurTasks int32 `protobuf:"varint,2,opt,name=curTasks,proto3" json:"curTasks,omitempty"`
}

func (x *ReplyServerInfo) Reset() {
	*x = ReplyServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingnode2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyServerInfo) ProtoMessage() {}

func (x *ReplyServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tradingnode2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyServerInfo.ProtoReflect.Descriptor instead.
func (*ReplyServerInfo) Descriptor() ([]byte, []int) {
	return file_tradingnode2_proto_rawDescGZIP(), []int{5}
}

func (x *ReplyServerInfo) GetMaxTasks() int32 {
	if x != nil {
		return x.MaxTasks
	}
	return 0
}

func (x *ReplyServerInfo) GetCurTasks() int32 {
	if x != nil {
		return x.CurTasks
	}
	return 0
}

// RequestCalcPNL - request calcPNL
type RequestCalcPNL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicRequest *BasicRequestData `protobuf:"bytes,1,opt,name=basicRequest,proto3" json:"basicRequest,omitempty"`
	Assets       []*Asset          `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`
	Baselines    []*Asset          `protobuf:"bytes,3,rep,name=baselines,proto3" json:"baselines,omitempty"`
	StartTs      int64             `protobuf:"varint,4,opt,name=startTs,proto3" json:"startTs,omitempty"`
	EndTs        int64             `protobuf:"varint,5,opt,name=endTs,proto3" json:"endTs,omitempty"`
	Strategies   []*Strategy       `protobuf:"bytes,6,rep,name=strategies,proto3" json:"strategies,omitempty"`
}

func (x *RequestCalcPNL) Reset() {
	*x = RequestCalcPNL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingnode2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCalcPNL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCalcPNL) ProtoMessage() {}

func (x *RequestCalcPNL) ProtoReflect() protoreflect.Message {
	mi := &file_tradingnode2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCalcPNL.ProtoReflect.Descriptor instead.
func (*RequestCalcPNL) Descriptor() ([]byte, []int) {
	return file_tradingnode2_proto_rawDescGZIP(), []int{6}
}

func (x *RequestCalcPNL) GetBasicRequest() *BasicRequestData {
	if x != nil {
		return x.BasicRequest
	}
	return nil
}

func (x *RequestCalcPNL) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *RequestCalcPNL) GetBaselines() []*Asset {
	if x != nil {
		return x.Baselines
	}
	return nil
}

func (x *RequestCalcPNL) GetStartTs() int64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *RequestCalcPNL) GetEndTs() int64 {
	if x != nil {
		return x.EndTs
	}
	return 0
}

func (x *RequestCalcPNL) GetStrategies() []*Strategy {
	if x != nil {
		return x.Strategies
	}
	return nil
}

// ReplyCalcPNL - reply calcPNL
type ReplyCalcPNL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pnl []*PNLData `protobuf:"bytes,1,rep,name=pnl,proto3" json:"pnl,omitempty"`
}

func (x *ReplyCalcPNL) Reset() {
	*x = ReplyCalcPNL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingnode2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyCalcPNL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyCalcPNL) ProtoMessage() {}

func (x *ReplyCalcPNL) ProtoReflect() protoreflect.Message {
	mi := &file_tradingnode2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyCalcPNL.ProtoReflect.Descriptor instead.
func (*ReplyCalcPNL) Descriptor() ([]byte, []int) {
	return file_tradingnode2_proto_rawDescGZIP(), []int{7}
}

func (x *ReplyCalcPNL) GetPnl() []*PNLData {
	if x != nil {
		return x.Pnl
	}
	return nil
}

var File_tradingnode2_proto protoreflect.FileDescriptor

var file_tradingnode2_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x1a,
	0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x85, 0x01, 0x0a, 0x0d, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x76,
	0x61, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd6, 0x01, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x2a, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x62, 0x75, 0x79, 0x12, 0x2c, 0x0a, 0x04,
	0x73, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x74,
	0x6f, 0x70, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x6c, 0x6f, 0x73, 0x73,
	0x22, 0x34, 0x0a, 0x0c, 0x50, 0x4e, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd0, 0x09, 0x0a, 0x07, 0x50, 0x4e, 0x4c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70,
	0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2f,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x50, 0x4e, 0x4c, 0x44, 0x61,
	0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d,
	0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e,
	0x45, 0x6e, 0x64, 0x54, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78,
	0x44, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x6d,
	0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x44, 0x72,
	0x61, 0x77, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x54, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x54, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6e, 0x6e, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x14, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x6c, 0x6f, 0x73, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70,
	0x6c, 0x6f, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x55, 0x70, 0x44, 0x61, 0x79, 0x54, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x55, 0x70, 0x44, 0x61, 0x79, 0x54, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x50, 0x65, 0x72, 0x55, 0x70, 0x44, 0x61, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x70, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x61, 0x79, 0x54, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x61, 0x79, 0x54, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x61, 0x79,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x44, 0x6f,
	0x77, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x55, 0x70, 0x57, 0x65,
	0x65, 0x6b, 0x54, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x55,
	0x70, 0x57, 0x65, 0x65, 0x6b, 0x54, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x65,
	0x72, 0x55, 0x70, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x70, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x57, 0x65, 0x65, 0x6b, 0x54, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x57, 0x65, 0x65, 0x6b, 0x54,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x57,
	0x65, 0x65, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x65,
	0x72, 0x44, 0x6f, 0x77, 0x6e, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x55, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x55, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x70, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x54, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78,
	0x44, 0x6f, 0x77, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6d,
	0x61, 0x78, 0x50, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x55, 0x70, 0x59, 0x65,
	0x61, 0x72, 0x54, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x55,
	0x70, 0x59, 0x65, 0x61, 0x72, 0x54, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x65,
	0x72, 0x55, 0x70, 0x59, 0x65, 0x61, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x70, 0x59, 0x65, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x54, 0x73, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x54,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x59,
	0x65, 0x61, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x65,
	0x72, 0x44, 0x6f, 0x77, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x22, 0x54, 0x0a, 0x11, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f,
	0x0a, 0x0c, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x49, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x0e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x50, 0x4e, 0x4c, 0x12, 0x3f, 0x0a,
	0x0c, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0c, 0x62, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x54, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x54, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x22, 0x34, 0x0a,
	0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x61, 0x6c, 0x63, 0x50, 0x4e, 0x4c, 0x12, 0x24, 0x0a,
	0x03, 0x70, 0x6e, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x50, 0x4e, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03,
	0x70, 0x6e, 0x6c, 0x32, 0x9c, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x32, 0x12, 0x4b, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x63, 0x50, 0x4e, 0x4c, 0x12, 0x19, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x6c, 0x63, 0x50, 0x4e, 0x4c, 0x1a, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x61, 0x6c, 0x63, 0x50, 0x4e, 0x4c,
	0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x7a, 0x68, 0x73, 0x30, 0x30, 0x37, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x64,
	0x62, 0x32, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tradingnode2_proto_rawDescOnce sync.Once
	file_tradingnode2_proto_rawDescData = file_tradingnode2_proto_rawDesc
)

func file_tradingnode2_proto_rawDescGZIP() []byte {
	file_tradingnode2_proto_rawDescOnce.Do(func() {
		file_tradingnode2_proto_rawDescData = protoimpl.X.CompressGZIP(file_tradingnode2_proto_rawDescData)
	})
	return file_tradingnode2_proto_rawDescData
}

var file_tradingnode2_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_tradingnode2_proto_goTypes = []interface{}{
	(*CtrlCondition)(nil),     // 0: tradingpb.CtrlCondition
	(*Strategy)(nil),          // 1: tradingpb.Strategy
	(*PNLDataValue)(nil),      // 2: tradingpb.PNLDataValue
	(*PNLData)(nil),           // 3: tradingpb.PNLData
	(*RequestServerInfo)(nil), // 4: tradingpb.RequestServerInfo
	(*ReplyServerInfo)(nil),   // 5: tradingpb.ReplyServerInfo
	(*RequestCalcPNL)(nil),    // 6: tradingpb.RequestCalcPNL
	(*ReplyCalcPNL)(nil),      // 7: tradingpb.ReplyCalcPNL
	(*Asset)(nil),             // 8: tradingpb.Asset
	(*BasicRequestData)(nil),  // 9: tradingpb.BasicRequestData
}
var file_tradingnode2_proto_depIdxs = []int32{
	8,  // 0: tradingpb.Strategy.asset:type_name -> tradingpb.Asset
	0,  // 1: tradingpb.Strategy.buy:type_name -> tradingpb.CtrlCondition
	0,  // 2: tradingpb.Strategy.sell:type_name -> tradingpb.CtrlCondition
	0,  // 3: tradingpb.Strategy.stoploss:type_name -> tradingpb.CtrlCondition
	8,  // 4: tradingpb.PNLData.asset:type_name -> tradingpb.Asset
	2,  // 5: tradingpb.PNLData.values:type_name -> tradingpb.PNLDataValue
	9,  // 6: tradingpb.RequestServerInfo.basicRequest:type_name -> tradingpb.BasicRequestData
	9,  // 7: tradingpb.RequestCalcPNL.basicRequest:type_name -> tradingpb.BasicRequestData
	8,  // 8: tradingpb.RequestCalcPNL.assets:type_name -> tradingpb.Asset
	8,  // 9: tradingpb.RequestCalcPNL.baselines:type_name -> tradingpb.Asset
	1,  // 10: tradingpb.RequestCalcPNL.strategies:type_name -> tradingpb.Strategy
	3,  // 11: tradingpb.ReplyCalcPNL.pnl:type_name -> tradingpb.PNLData
	4,  // 12: tradingpb.TradingNode2.getServerInfo:input_type -> tradingpb.RequestServerInfo
	6,  // 13: tradingpb.TradingNode2.calcPNL:input_type -> tradingpb.RequestCalcPNL
	5,  // 14: tradingpb.TradingNode2.getServerInfo:output_type -> tradingpb.ReplyServerInfo
	7,  // 15: tradingpb.TradingNode2.calcPNL:output_type -> tradingpb.ReplyCalcPNL
	14, // [14:16] is the sub-list for method output_type
	12, // [12:14] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_tradingnode2_proto_init() }
func file_tradingnode2_proto_init() {
	if File_tradingnode2_proto != nil {
		return
	}
	file_trading2_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tradingnode2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtrlCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingnode2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Strategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingnode2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PNLDataValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingnode2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PNLData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingnode2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingnode2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingnode2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCalcPNL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingnode2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyCalcPNL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tradingnode2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tradingnode2_proto_goTypes,
		DependencyIndexes: file_tradingnode2_proto_depIdxs,
		MessageInfos:      file_tradingnode2_proto_msgTypes,
	}.Build()
	File_tradingnode2_proto = out.File
	file_tradingnode2_proto_rawDesc = nil
	file_tradingnode2_proto_goTypes = nil
	file_tradingnode2_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TradingNode2Client is the client API for TradingNode2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TradingNode2Client interface {
	// getServerInfo - get server infomation
	GetServerInfo(ctx context.Context, in *RequestServerInfo, opts ...grpc.CallOption) (*ReplyServerInfo, error)
	// calcPNL - calc PNL
	CalcPNL(ctx context.Context, in *RequestCalcPNL, opts ...grpc.CallOption) (*ReplyCalcPNL, error)
}

type tradingNode2Client struct {
	cc grpc.ClientConnInterface
}

func NewTradingNode2Client(cc grpc.ClientConnInterface) TradingNode2Client {
	return &tradingNode2Client{cc}
}

func (c *tradingNode2Client) GetServerInfo(ctx context.Context, in *RequestServerInfo, opts ...grpc.CallOption) (*ReplyServerInfo, error) {
	out := new(ReplyServerInfo)
	err := c.cc.Invoke(ctx, "/tradingpb.TradingNode2/getServerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingNode2Client) CalcPNL(ctx context.Context, in *RequestCalcPNL, opts ...grpc.CallOption) (*ReplyCalcPNL, error) {
	out := new(ReplyCalcPNL)
	err := c.cc.Invoke(ctx, "/tradingpb.TradingNode2/calcPNL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingNode2Server is the server API for TradingNode2 service.
type TradingNode2Server interface {
	// getServerInfo - get server infomation
	GetServerInfo(context.Context, *RequestServerInfo) (*ReplyServerInfo, error)
	// calcPNL - calc PNL
	CalcPNL(context.Context, *RequestCalcPNL) (*ReplyCalcPNL, error)
}

// UnimplementedTradingNode2Server can be embedded to have forward compatible implementations.
type UnimplementedTradingNode2Server struct {
}

func (*UnimplementedTradingNode2Server) GetServerInfo(context.Context, *RequestServerInfo) (*ReplyServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (*UnimplementedTradingNode2Server) CalcPNL(context.Context, *RequestCalcPNL) (*ReplyCalcPNL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcPNL not implemented")
}

func RegisterTradingNode2Server(s *grpc.Server, srv TradingNode2Server) {
	s.RegisterService(&_TradingNode2_serviceDesc, srv)
}

func _TradingNode2_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestServerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingNode2Server).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tradingpb.TradingNode2/GetServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingNode2Server).GetServerInfo(ctx, req.(*RequestServerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingNode2_CalcPNL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCalcPNL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingNode2Server).CalcPNL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tradingpb.TradingNode2/CalcPNL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingNode2Server).CalcPNL(ctx, req.(*RequestCalcPNL))
	}
	return interceptor(ctx, in, info, handler)
}

var _TradingNode2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tradingpb.TradingNode2",
	HandlerType: (*TradingNode2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getServerInfo",
			Handler:    _TradingNode2_GetServerInfo_Handler,
		},
		{
			MethodName: "calcPNL",
			Handler:    _TradingNode2_CalcPNL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tradingnode2.proto",
}

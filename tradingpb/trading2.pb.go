// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.2
// source: trading2.proto

package tradingpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CtrlType int32

const (
	CtrlType_CTRL_INIT       CtrlType = 0
	CtrlType_CTRL_BUY        CtrlType = 1
	CtrlType_CTRL_SELL       CtrlType = 2
	CtrlType_CTRL_STOPLOSS   CtrlType = 3
	CtrlType_CTRL_TAKEPROFIT CtrlType = 4
	CtrlType_CTRL_WITHDRAW   CtrlType = 5
	CtrlType_CTRL_DEPOSIT    CtrlType = 6
)

// Enum value maps for CtrlType.
var (
	CtrlType_name = map[int32]string{
		0: "CTRL_INIT",
		1: "CTRL_BUY",
		2: "CTRL_SELL",
		3: "CTRL_STOPLOSS",
		4: "CTRL_TAKEPROFIT",
		5: "CTRL_WITHDRAW",
		6: "CTRL_DEPOSIT",
	}
	CtrlType_value = map[string]int32{
		"CTRL_INIT":       0,
		"CTRL_BUY":        1,
		"CTRL_SELL":       2,
		"CTRL_STOPLOSS":   3,
		"CTRL_TAKEPROFIT": 4,
		"CTRL_WITHDRAW":   5,
		"CTRL_DEPOSIT":    6,
	}
)

func (x CtrlType) Enum() *CtrlType {
	p := new(CtrlType)
	*p = x
	return p
}

func (x CtrlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CtrlType) Descriptor() protoreflect.EnumDescriptor {
	return file_trading2_proto_enumTypes[0].Descriptor()
}

func (CtrlType) Type() protoreflect.EnumType {
	return &file_trading2_proto_enumTypes[0]
}

func (x CtrlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CtrlType.Descriptor instead.
func (CtrlType) EnumDescriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{0}
}

// AIPTimeType - time type for automatic investment plan
type AIPTimeType int32

const (
	AIPTimeType_AIPTT_WEEKDAY  AIPTimeType = 0
	AIPTimeType_AIPTT_MONTHDAY AIPTimeType = 1
)

// Enum value maps for AIPTimeType.
var (
	AIPTimeType_name = map[int32]string{
		0: "AIPTT_WEEKDAY",
		1: "AIPTT_MONTHDAY",
	}
	AIPTimeType_value = map[string]int32{
		"AIPTT_WEEKDAY":  0,
		"AIPTT_MONTHDAY": 1,
	}
)

func (x AIPTimeType) Enum() *AIPTimeType {
	p := new(AIPTimeType)
	*p = x
	return p
}

func (x AIPTimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AIPTimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_trading2_proto_enumTypes[1].Descriptor()
}

func (AIPTimeType) Type() protoreflect.EnumType {
	return &file_trading2_proto_enumTypes[1]
}

func (x AIPTimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AIPTimeType.Descriptor instead.
func (AIPTimeType) EnumDescriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{1}
}

// BasicRequestData - basic request data
type BasicRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *BasicRequestData) Reset() {
	*x = BasicRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicRequestData) ProtoMessage() {}

func (x *BasicRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicRequestData.ProtoReflect.Descriptor instead.
func (*BasicRequestData) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{0}
}

func (x *BasicRequestData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Asset - asset
type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market string   `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	Code   string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Tags   []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{1}
}

func (x *Asset) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *Asset) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Asset) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// CtrlNode - ctrl node
type CtrlNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts                  int64    `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Src                 *Asset   `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	Dst                 *Asset   `protobuf:"bytes,3,opt,name=dst,proto3" json:"dst,omitempty"`
	VolumeSrc           float64  `protobuf:"fixed64,4,opt,name=volumeSrc,proto3" json:"volumeSrc,omitempty"`
	VolumeDst           float64  `protobuf:"fixed64,5,opt,name=volumeDst,proto3" json:"volumeDst,omitempty"`
	Type                CtrlType `protobuf:"varint,6,opt,name=type,proto3,enum=tradingpb.CtrlType" json:"type,omitempty"`
	Fee                 float64  `protobuf:"fixed64,7,opt,name=fee,proto3" json:"fee,omitempty"`
	AverageHoldingPrice float64  `protobuf:"fixed64,8,opt,name=averageHoldingPrice,proto3" json:"averageHoldingPrice,omitempty"`
	SellPrice           float64  `protobuf:"fixed64,9,opt,name=sellPrice,proto3" json:"sellPrice,omitempty"`
}

func (x *CtrlNode) Reset() {
	*x = CtrlNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtrlNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtrlNode) ProtoMessage() {}

func (x *CtrlNode) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtrlNode.ProtoReflect.Descriptor instead.
func (*CtrlNode) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{2}
}

func (x *CtrlNode) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *CtrlNode) GetSrc() *Asset {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *CtrlNode) GetDst() *Asset {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *CtrlNode) GetVolumeSrc() float64 {
	if x != nil {
		return x.VolumeSrc
	}
	return 0
}

func (x *CtrlNode) GetVolumeDst() float64 {
	if x != nil {
		return x.VolumeDst
	}
	return 0
}

func (x *CtrlNode) GetType() CtrlType {
	if x != nil {
		return x.Type
	}
	return CtrlType_CTRL_INIT
}

func (x *CtrlNode) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *CtrlNode) GetAverageHoldingPrice() float64 {
	if x != nil {
		return x.AverageHoldingPrice
	}
	return 0
}

func (x *CtrlNode) GetSellPrice() float64 {
	if x != nil {
		return x.SellPrice
	}
	return 0
}

// WalletAsset - wallet asset
type WalletAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset *Asset  `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WalletAsset) Reset() {
	*x = WalletAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletAsset) ProtoMessage() {}

func (x *WalletAsset) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletAsset.ProtoReflect.Descriptor instead.
func (*WalletAsset) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{3}
}

func (x *WalletAsset) GetAsset() *Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *WalletAsset) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Wallet - wallet
type Wallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*WalletAsset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *Wallet) Reset() {
	*x = Wallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallet) ProtoMessage() {}

func (x *Wallet) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wallet.ProtoReflect.Descriptor instead.
func (*Wallet) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{4}
}

func (x *Wallet) GetAssets() []*WalletAsset {
	if x != nil {
		return x.Assets
	}
	return nil
}

// CtrlCondition - control condition
type CtrlCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indicator     string    `protobuf:"bytes,1,opt,name=indicator,proto3" json:"indicator,omitempty"`
	Vals          []float32 `protobuf:"fixed32,2,rep,packed,name=vals,proto3" json:"vals,omitempty"`
	Operators     []string  `protobuf:"bytes,3,rep,name=operators,proto3" json:"operators,omitempty"`         // 操作符，按道理应该和 vals 长度一样，大于小于等于
	CombCondition string    `protobuf:"bytes,4,opt,name=combCondition,proto3" json:"combCondition,omitempty"` // 组合条件，如果有多个操作条件，这里是 与或非
	Minvals       []float32 `protobuf:"fixed32,5,rep,packed,name=minvals,proto3" json:"minvals,omitempty"`
	Maxvals       []float32 `protobuf:"fixed32,6,rep,packed,name=maxvals,proto3" json:"maxvals,omitempty"`
	Offvals       []float32 `protobuf:"fixed32,7,rep,packed,name=offvals,proto3" json:"offvals,omitempty"`
	StrVals       []string  `protobuf:"bytes,8,rep,name=strVals,proto3" json:"strVals,omitempty"` // 字符串参数
}

func (x *CtrlCondition) Reset() {
	*x = CtrlCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtrlCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtrlCondition) ProtoMessage() {}

func (x *CtrlCondition) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtrlCondition.ProtoReflect.Descriptor instead.
func (*CtrlCondition) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{5}
}

func (x *CtrlCondition) GetIndicator() string {
	if x != nil {
		return x.Indicator
	}
	return ""
}

func (x *CtrlCondition) GetVals() []float32 {
	if x != nil {
		return x.Vals
	}
	return nil
}

func (x *CtrlCondition) GetOperators() []string {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *CtrlCondition) GetCombCondition() string {
	if x != nil {
		return x.CombCondition
	}
	return ""
}

func (x *CtrlCondition) GetMinvals() []float32 {
	if x != nil {
		return x.Minvals
	}
	return nil
}

func (x *CtrlCondition) GetMaxvals() []float32 {
	if x != nil {
		return x.Maxvals
	}
	return nil
}

func (x *CtrlCondition) GetOffvals() []float32 {
	if x != nil {
		return x.Offvals
	}
	return nil
}

func (x *CtrlCondition) GetStrVals() []string {
	if x != nil {
		return x.StrVals
	}
	return nil
}

// BuyParams - buy parameters
type BuyParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	InitMoney float32 `protobuf:"fixed32,1,opt,name=initMoney,proto3" json:"initMoney,omitempty"` // 初始资金池
	// Deprecated: Do not use.
	PerMoney      float32 `protobuf:"fixed32,2,opt,name=perMoney,proto3" json:"perMoney,omitempty"`           // 每次用初始资金池的百分比来购买
	Volume        float32 `protobuf:"fixed32,3,opt,name=volume,proto3" json:"volume,omitempty"`               // 每次买特定数量
	AipMoney      float32 `protobuf:"fixed32,4,opt,name=aipMoney,proto3" json:"aipMoney,omitempty"`           // 每次买特定金额，这个一般用于定投
	PerInitMoney  float32 `protobuf:"fixed32,5,opt,name=perInitMoney,proto3" json:"perInitMoney,omitempty"`   // 使用初始资金池的一定比例购买
	PerHandMoney  float32 `protobuf:"fixed32,6,opt,name=perHandMoney,proto3" json:"perHandMoney,omitempty"`   // 使用余额的一定比例购买
	PerTotalMoney float32 `protobuf:"fixed32,7,opt,name=perTotalMoney,proto3" json:"perTotalMoney,omitempty"` // 使用总资金的一定比例购买
}

func (x *BuyParams) Reset() {
	*x = BuyParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyParams) ProtoMessage() {}

func (x *BuyParams) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyParams.ProtoReflect.Descriptor instead.
func (*BuyParams) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{6}
}

// Deprecated: Do not use.
func (x *BuyParams) GetInitMoney() float32 {
	if x != nil {
		return x.InitMoney
	}
	return 0
}

// Deprecated: Do not use.
func (x *BuyParams) GetPerMoney() float32 {
	if x != nil {
		return x.PerMoney
	}
	return 0
}

func (x *BuyParams) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *BuyParams) GetAipMoney() float32 {
	if x != nil {
		return x.AipMoney
	}
	return 0
}

func (x *BuyParams) GetPerInitMoney() float32 {
	if x != nil {
		return x.PerInitMoney
	}
	return 0
}

func (x *BuyParams) GetPerHandMoney() float32 {
	if x != nil {
		return x.PerHandMoney
	}
	return 0
}

func (x *BuyParams) GetPerTotalMoney() float32 {
	if x != nil {
		return x.PerTotalMoney
	}
	return 0
}

// SellParams - sell parameters
type SellParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume    float32 `protobuf:"fixed32,1,opt,name=volume,proto3" json:"volume,omitempty"`
	PerVolume float32 `protobuf:"fixed32,2,opt,name=perVolume,proto3" json:"perVolume,omitempty"`
	Money     float32 `protobuf:"fixed32,3,opt,name=money,proto3" json:"money,omitempty"`
}

func (x *SellParams) Reset() {
	*x = SellParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellParams) ProtoMessage() {}

func (x *SellParams) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellParams.ProtoReflect.Descriptor instead.
func (*SellParams) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{7}
}

func (x *SellParams) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *SellParams) GetPerVolume() float32 {
	if x != nil {
		return x.PerVolume
	}
	return 0
}

func (x *SellParams) GetMoney() float32 {
	if x != nil {
		return x.Money
	}
	return 0
}

// StopLossParams - stop loss parameters
type StopLossParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drawdown float32 `protobuf:"fixed32,1,opt,name=drawdown,proto3" json:"drawdown,omitempty"`
}

func (x *StopLossParams) Reset() {
	*x = StopLossParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopLossParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopLossParams) ProtoMessage() {}

func (x *StopLossParams) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopLossParams.ProtoReflect.Descriptor instead.
func (*StopLossParams) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{8}
}

func (x *StopLossParams) GetDrawdown() float32 {
	if x != nil {
		return x.Drawdown
	}
	return 0
}

// TakeProfitParams - take profit parameters
type TakeProfitParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profit float32 `protobuf:"fixed32,1,opt,name=profit,proto3" json:"profit,omitempty"`
}

func (x *TakeProfitParams) Reset() {
	*x = TakeProfitParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeProfitParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeProfitParams) ProtoMessage() {}

func (x *TakeProfitParams) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeProfitParams.ProtoReflect.Descriptor instead.
func (*TakeProfitParams) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{9}
}

func (x *TakeProfitParams) GetProfit() float32 {
	if x != nil {
		return x.Profit
	}
	return 0
}

// InitParams - initial parameters
type InitParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money  float32 `protobuf:"fixed32,1,opt,name=money,proto3" json:"money,omitempty"`
	Vomume float32 `protobuf:"fixed32,2,opt,name=vomume,proto3" json:"vomume,omitempty"`
}

func (x *InitParams) Reset() {
	*x = InitParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitParams) ProtoMessage() {}

func (x *InitParams) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitParams.ProtoReflect.Descriptor instead.
func (*InitParams) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{10}
}

func (x *InitParams) GetMoney() float32 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *InitParams) GetVomume() float32 {
	if x != nil {
		return x.Vomume
	}
	return 0
}

// AIPParams - parameters for automatic investment plan
type AIPParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money float32     `protobuf:"fixed32,1,opt,name=money,proto3" json:"money,omitempty"`
	Type  AIPTimeType `protobuf:"varint,2,opt,name=type,proto3,enum=tradingpb.AIPTimeType" json:"type,omitempty"`
	Day   int32       `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *AIPParams) Reset() {
	*x = AIPParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AIPParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIPParams) ProtoMessage() {}

func (x *AIPParams) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIPParams.ProtoReflect.Descriptor instead.
func (*AIPParams) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{11}
}

func (x *AIPParams) GetMoney() float32 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *AIPParams) GetType() AIPTimeType {
	if x != nil {
		return x.Type
	}
	return AIPTimeType_AIPTT_WEEKDAY
}

func (x *AIPParams) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

// Strategy - strategy
type Strategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Asset            *Asset            `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Buy              []*CtrlCondition  `protobuf:"bytes,3,rep,name=buy,proto3" json:"buy,omitempty"`
	Sell             []*CtrlCondition  `protobuf:"bytes,4,rep,name=sell,proto3" json:"sell,omitempty"`
	Stoploss         []*CtrlCondition  `protobuf:"bytes,5,rep,name=stoploss,proto3" json:"stoploss,omitempty"`
	Takeprofit       []*CtrlCondition  `protobuf:"bytes,6,rep,name=takeprofit,proto3" json:"takeprofit,omitempty"`
	ParamsBuy        *BuyParams        `protobuf:"bytes,7,opt,name=paramsBuy,proto3" json:"paramsBuy,omitempty"`
	ParamsSell       *SellParams       `protobuf:"bytes,8,opt,name=paramsSell,proto3" json:"paramsSell,omitempty"`
	ParamsStopLoss   *StopLossParams   `protobuf:"bytes,9,opt,name=paramsStopLoss,proto3" json:"paramsStopLoss,omitempty"`
	ParamsTakeProfit *TakeProfitParams `protobuf:"bytes,10,opt,name=paramsTakeProfit,proto3" json:"paramsTakeProfit,omitempty"`
	ParamsInit       *InitParams       `protobuf:"bytes,11,opt,name=paramsInit,proto3" json:"paramsInit,omitempty"`
	ParamsAIP        *AIPParams        `protobuf:"bytes,12,opt,name=paramsAIP,proto3" json:"paramsAIP,omitempty"`
	Title            string            `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Strategy) Reset() {
	*x = Strategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Strategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strategy) ProtoMessage() {}

func (x *Strategy) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strategy.ProtoReflect.Descriptor instead.
func (*Strategy) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{12}
}

func (x *Strategy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Strategy) GetAsset() *Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *Strategy) GetBuy() []*CtrlCondition {
	if x != nil {
		return x.Buy
	}
	return nil
}

func (x *Strategy) GetSell() []*CtrlCondition {
	if x != nil {
		return x.Sell
	}
	return nil
}

func (x *Strategy) GetStoploss() []*CtrlCondition {
	if x != nil {
		return x.Stoploss
	}
	return nil
}

func (x *Strategy) GetTakeprofit() []*CtrlCondition {
	if x != nil {
		return x.Takeprofit
	}
	return nil
}

func (x *Strategy) GetParamsBuy() *BuyParams {
	if x != nil {
		return x.ParamsBuy
	}
	return nil
}

func (x *Strategy) GetParamsSell() *SellParams {
	if x != nil {
		return x.ParamsSell
	}
	return nil
}

func (x *Strategy) GetParamsStopLoss() *StopLossParams {
	if x != nil {
		return x.ParamsStopLoss
	}
	return nil
}

func (x *Strategy) GetParamsTakeProfit() *TakeProfitParams {
	if x != nil {
		return x.ParamsTakeProfit
	}
	return nil
}

func (x *Strategy) GetParamsInit() *InitParams {
	if x != nil {
		return x.ParamsInit
	}
	return nil
}

func (x *Strategy) GetParamsAIP() *AIPParams {
	if x != nil {
		return x.ParamsAIP
	}
	return nil
}

func (x *Strategy) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// PNLDataValue -
type PNLDataValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts       int64    `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`              // 时间戳
	PerValue float32  `protobuf:"fixed32,2,opt,name=perValue,proto3" json:"perValue,omitempty"` // 盈亏比，应该等于 value / cost
	Tags     []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`           // 标记，用来标记当前时间点下做了哪些操作，譬如 buy、sell 等，一个时间点可能做多个操作
	Cost     float32  `protobuf:"fixed32,4,opt,name=cost,proto3" json:"cost,omitempty"`         // 总成本
	Value    float32  `protobuf:"fixed32,5,opt,name=value,proto3" json:"value,omitempty"`       // 总价值
	Volume   float32  `protobuf:"fixed32,6,opt,name=volume,proto3" json:"volume,omitempty"`     // 如果是单资产，这里是拥有数量
	Price    float32  `protobuf:"fixed32,7,opt,name=price,proto3" json:"price,omitempty"`       // 如果是单资产，这里是当前资产价格
}

func (x *PNLDataValue) Reset() {
	*x = PNLDataValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNLDataValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNLDataValue) ProtoMessage() {}

func (x *PNLDataValue) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNLDataValue.ProtoReflect.Descriptor instead.
func (*PNLDataValue) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{13}
}

func (x *PNLDataValue) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *PNLDataValue) GetPerValue() float32 {
	if x != nil {
		return x.PerValue
	}
	return 0
}

func (x *PNLDataValue) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PNLDataValue) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *PNLDataValue) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PNLDataValue) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *PNLDataValue) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

// PNLAssetData - asset data in PNL
type PNLAssetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset                *Asset          `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Values               []*PNLDataValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	MaxDrawdown          float32         `protobuf:"fixed32,3,opt,name=maxDrawdown,proto3" json:"maxDrawdown,omitempty"`
	MaxDrawdownStartTs   int64           `protobuf:"varint,4,opt,name=maxDrawdownStartTs,proto3" json:"maxDrawdownStartTs,omitempty"`
	MaxDrawdownEndTs     int64           `protobuf:"varint,5,opt,name=maxDrawdownEndTs,proto3" json:"maxDrawdownEndTs,omitempty"`
	MaxDrawup            float32         `protobuf:"fixed32,6,opt,name=maxDrawup,proto3" json:"maxDrawup,omitempty"`
	MaxDrawupStartTs     int64           `protobuf:"varint,7,opt,name=maxDrawupStartTs,proto3" json:"maxDrawupStartTs,omitempty"`
	MaxDrawupEndTs       int64           `protobuf:"varint,8,opt,name=maxDrawupEndTs,proto3" json:"maxDrawupEndTs,omitempty"`
	Sharpe               float32         `protobuf:"fixed32,9,opt,name=sharpe,proto3" json:"sharpe,omitempty"`
	AnnualizedReturns    float32         `protobuf:"fixed32,10,opt,name=annualizedReturns,proto3" json:"annualizedReturns,omitempty"`
	AnnualizedVolatility float32         `protobuf:"fixed32,11,opt,name=annualizedVolatility,proto3" json:"annualizedVolatility,omitempty"`
	TotalReturns         float32         `protobuf:"fixed32,12,opt,name=totalReturns,proto3" json:"totalReturns,omitempty"`
	Variance             float32         `protobuf:"fixed32,13,opt,name=variance,proto3" json:"variance,omitempty"`
	BuyTimes             int32           `protobuf:"varint,14,opt,name=buyTimes,proto3" json:"buyTimes,omitempty"`
	SellTimes            int32           `protobuf:"varint,15,opt,name=sellTimes,proto3" json:"sellTimes,omitempty"`
	StoplossTimes        int32           `protobuf:"varint,16,opt,name=stoplossTimes,proto3" json:"stoplossTimes,omitempty"`
	MaxUpDayTs           int64           `protobuf:"varint,17,opt,name=maxUpDayTs,proto3" json:"maxUpDayTs,omitempty"`
	MaxPerUpDay          float32         `protobuf:"fixed32,18,opt,name=maxPerUpDay,proto3" json:"maxPerUpDay,omitempty"`
	MaxDownDayTs         int64           `protobuf:"varint,19,opt,name=maxDownDayTs,proto3" json:"maxDownDayTs,omitempty"`
	MaxPerDownDay        float32         `protobuf:"fixed32,20,opt,name=maxPerDownDay,proto3" json:"maxPerDownDay,omitempty"`
	MaxUpWeekTs          int64           `protobuf:"varint,21,opt,name=maxUpWeekTs,proto3" json:"maxUpWeekTs,omitempty"`
	MaxPerUpWeek         float32         `protobuf:"fixed32,22,opt,name=maxPerUpWeek,proto3" json:"maxPerUpWeek,omitempty"`
	MaxDownWeekTs        int64           `protobuf:"varint,23,opt,name=maxDownWeekTs,proto3" json:"maxDownWeekTs,omitempty"`
	MaxPerDownWeek       float32         `protobuf:"fixed32,24,opt,name=maxPerDownWeek,proto3" json:"maxPerDownWeek,omitempty"`
	MaxUpMonthTs         int64           `protobuf:"varint,25,opt,name=maxUpMonthTs,proto3" json:"maxUpMonthTs,omitempty"`
	MaxPerUpMonth        float32         `protobuf:"fixed32,26,opt,name=maxPerUpMonth,proto3" json:"maxPerUpMonth,omitempty"`
	MaxDownMonthTs       int64           `protobuf:"varint,27,opt,name=maxDownMonthTs,proto3" json:"maxDownMonthTs,omitempty"`
	MaxPerDownMonth      float32         `protobuf:"fixed32,28,opt,name=maxPerDownMonth,proto3" json:"maxPerDownMonth,omitempty"`
	MaxUpYearTs          int64           `protobuf:"varint,29,opt,name=maxUpYearTs,proto3" json:"maxUpYearTs,omitempty"`
	MaxPerUpYear         float32         `protobuf:"fixed32,30,opt,name=maxPerUpYear,proto3" json:"maxPerUpYear,omitempty"`
	MaxDownYearTs        int64           `protobuf:"varint,31,opt,name=maxDownYearTs,proto3" json:"maxDownYearTs,omitempty"`
	MaxPerDownYear       float32         `protobuf:"fixed32,32,opt,name=maxPerDownYear,proto3" json:"maxPerDownYear,omitempty"`
	LstCtrl              []*CtrlNode     `protobuf:"bytes,33,rep,name=lstCtrl,proto3" json:"lstCtrl,omitempty"`
}

func (x *PNLAssetData) Reset() {
	*x = PNLAssetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNLAssetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNLAssetData) ProtoMessage() {}

func (x *PNLAssetData) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNLAssetData.ProtoReflect.Descriptor instead.
func (*PNLAssetData) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{14}
}

func (x *PNLAssetData) GetAsset() *Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *PNLAssetData) GetValues() []*PNLDataValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PNLAssetData) GetMaxDrawdown() float32 {
	if x != nil {
		return x.MaxDrawdown
	}
	return 0
}

func (x *PNLAssetData) GetMaxDrawdownStartTs() int64 {
	if x != nil {
		return x.MaxDrawdownStartTs
	}
	return 0
}

func (x *PNLAssetData) GetMaxDrawdownEndTs() int64 {
	if x != nil {
		return x.MaxDrawdownEndTs
	}
	return 0
}

func (x *PNLAssetData) GetMaxDrawup() float32 {
	if x != nil {
		return x.MaxDrawup
	}
	return 0
}

func (x *PNLAssetData) GetMaxDrawupStartTs() int64 {
	if x != nil {
		return x.MaxDrawupStartTs
	}
	return 0
}

func (x *PNLAssetData) GetMaxDrawupEndTs() int64 {
	if x != nil {
		return x.MaxDrawupEndTs
	}
	return 0
}

func (x *PNLAssetData) GetSharpe() float32 {
	if x != nil {
		return x.Sharpe
	}
	return 0
}

func (x *PNLAssetData) GetAnnualizedReturns() float32 {
	if x != nil {
		return x.AnnualizedReturns
	}
	return 0
}

func (x *PNLAssetData) GetAnnualizedVolatility() float32 {
	if x != nil {
		return x.AnnualizedVolatility
	}
	return 0
}

func (x *PNLAssetData) GetTotalReturns() float32 {
	if x != nil {
		return x.TotalReturns
	}
	return 0
}

func (x *PNLAssetData) GetVariance() float32 {
	if x != nil {
		return x.Variance
	}
	return 0
}

func (x *PNLAssetData) GetBuyTimes() int32 {
	if x != nil {
		return x.BuyTimes
	}
	return 0
}

func (x *PNLAssetData) GetSellTimes() int32 {
	if x != nil {
		return x.SellTimes
	}
	return 0
}

func (x *PNLAssetData) GetStoplossTimes() int32 {
	if x != nil {
		return x.StoplossTimes
	}
	return 0
}

func (x *PNLAssetData) GetMaxUpDayTs() int64 {
	if x != nil {
		return x.MaxUpDayTs
	}
	return 0
}

func (x *PNLAssetData) GetMaxPerUpDay() float32 {
	if x != nil {
		return x.MaxPerUpDay
	}
	return 0
}

func (x *PNLAssetData) GetMaxDownDayTs() int64 {
	if x != nil {
		return x.MaxDownDayTs
	}
	return 0
}

func (x *PNLAssetData) GetMaxPerDownDay() float32 {
	if x != nil {
		return x.MaxPerDownDay
	}
	return 0
}

func (x *PNLAssetData) GetMaxUpWeekTs() int64 {
	if x != nil {
		return x.MaxUpWeekTs
	}
	return 0
}

func (x *PNLAssetData) GetMaxPerUpWeek() float32 {
	if x != nil {
		return x.MaxPerUpWeek
	}
	return 0
}

func (x *PNLAssetData) GetMaxDownWeekTs() int64 {
	if x != nil {
		return x.MaxDownWeekTs
	}
	return 0
}

func (x *PNLAssetData) GetMaxPerDownWeek() float32 {
	if x != nil {
		return x.MaxPerDownWeek
	}
	return 0
}

func (x *PNLAssetData) GetMaxUpMonthTs() int64 {
	if x != nil {
		return x.MaxUpMonthTs
	}
	return 0
}

func (x *PNLAssetData) GetMaxPerUpMonth() float32 {
	if x != nil {
		return x.MaxPerUpMonth
	}
	return 0
}

func (x *PNLAssetData) GetMaxDownMonthTs() int64 {
	if x != nil {
		return x.MaxDownMonthTs
	}
	return 0
}

func (x *PNLAssetData) GetMaxPerDownMonth() float32 {
	if x != nil {
		return x.MaxPerDownMonth
	}
	return 0
}

func (x *PNLAssetData) GetMaxUpYearTs() int64 {
	if x != nil {
		return x.MaxUpYearTs
	}
	return 0
}

func (x *PNLAssetData) GetMaxPerUpYear() float32 {
	if x != nil {
		return x.MaxPerUpYear
	}
	return 0
}

func (x *PNLAssetData) GetMaxDownYearTs() int64 {
	if x != nil {
		return x.MaxDownYearTs
	}
	return 0
}

func (x *PNLAssetData) GetMaxPerDownYear() float32 {
	if x != nil {
		return x.MaxPerDownYear
	}
	return 0
}

func (x *PNLAssetData) GetLstCtrl() []*CtrlNode {
	if x != nil {
		return x.LstCtrl
	}
	return nil
}

// PNLData -
type PNLData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Total  *PNLAssetData   `protobuf:"bytes,2,opt,name=total,proto3" json:"total,omitempty"`
	Assets []*PNLAssetData `protobuf:"bytes,3,rep,name=assets,proto3" json:"assets,omitempty"`
	Title  string          `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// Deprecated: Do not use.
	Lastts int64 `protobuf:"varint,5,opt,name=lastts,proto3" json:"lastts,omitempty"`
}

func (x *PNLData) Reset() {
	*x = PNLData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNLData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNLData) ProtoMessage() {}

func (x *PNLData) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNLData.ProtoReflect.Descriptor instead.
func (*PNLData) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{15}
}

func (x *PNLData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PNLData) GetTotal() *PNLAssetData {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *PNLData) GetAssets() []*PNLAssetData {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *PNLData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// Deprecated: Do not use.
func (x *PNLData) GetLastts() int64 {
	if x != nil {
		return x.Lastts
	}
	return 0
}

// SimTradingParams - simTrading parameters
type SimTradingParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets     []*Asset    `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
	Baselines  []*Asset    `protobuf:"bytes,2,rep,name=baselines,proto3" json:"baselines,omitempty"`
	StartTs    int64       `protobuf:"varint,3,opt,name=startTs,proto3" json:"startTs,omitempty"`
	EndTs      int64       `protobuf:"varint,4,opt,name=endTs,proto3" json:"endTs,omitempty"`
	Strategies []*Strategy `protobuf:"bytes,5,rep,name=strategies,proto3" json:"strategies,omitempty"`
	Wallet     *Wallet     `protobuf:"bytes,6,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

func (x *SimTradingParams) Reset() {
	*x = SimTradingParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimTradingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimTradingParams) ProtoMessage() {}

func (x *SimTradingParams) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimTradingParams.ProtoReflect.Descriptor instead.
func (*SimTradingParams) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{16}
}

func (x *SimTradingParams) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *SimTradingParams) GetBaselines() []*Asset {
	if x != nil {
		return x.Baselines
	}
	return nil
}

func (x *SimTradingParams) GetStartTs() int64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *SimTradingParams) GetEndTs() int64 {
	if x != nil {
		return x.EndTs
	}
	return 0
}

func (x *SimTradingParams) GetStrategies() []*Strategy {
	if x != nil {
		return x.Strategies
	}
	return nil
}

func (x *SimTradingParams) GetWallet() *Wallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

// TradingNodeInfo - trading node2 infomation
type TradingNodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxTasks int32 `protobuf:"varint,1,opt,name=maxTasks,proto3" json:"maxTasks,omitempty"`
	CurTasks int32 `protobuf:"varint,2,opt,name=curTasks,proto3" json:"curTasks,omitempty"`
}

func (x *TradingNodeInfo) Reset() {
	*x = TradingNodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingNodeInfo) ProtoMessage() {}

func (x *TradingNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingNodeInfo.ProtoReflect.Descriptor instead.
func (*TradingNodeInfo) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{17}
}

func (x *TradingNodeInfo) GetMaxTasks() int32 {
	if x != nil {
		return x.MaxTasks
	}
	return 0
}

func (x *TradingNodeInfo) GetCurTasks() int32 {
	if x != nil {
		return x.CurTasks
	}
	return 0
}

// SimTradingCacheNode -
type SimTradingCacheNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params *SimTradingParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	Key    string            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	LastTs int64             `protobuf:"varint,3,opt,name=lastTs,proto3" json:"lastTs,omitempty"`
}

func (x *SimTradingCacheNode) Reset() {
	*x = SimTradingCacheNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimTradingCacheNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimTradingCacheNode) ProtoMessage() {}

func (x *SimTradingCacheNode) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimTradingCacheNode.ProtoReflect.Descriptor instead.
func (*SimTradingCacheNode) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{18}
}

func (x *SimTradingCacheNode) GetParams() *SimTradingParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SimTradingCacheNode) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SimTradingCacheNode) GetLastTs() int64 {
	if x != nil {
		return x.LastTs
	}
	return 0
}

// SimTradingCache -
type SimTradingCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*SimTradingCacheNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *SimTradingCache) Reset() {
	*x = SimTradingCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trading2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimTradingCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimTradingCache) ProtoMessage() {}

func (x *SimTradingCache) ProtoReflect() protoreflect.Message {
	mi := &file_trading2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimTradingCache.ProtoReflect.Descriptor instead.
func (*SimTradingCache) Descriptor() ([]byte, []int) {
	return file_trading2_proto_rawDescGZIP(), []int{19}
}

func (x *SimTradingCache) GetNodes() []*SimTradingCacheNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

var File_trading2_proto protoreflect.FileDescriptor

var file_trading2_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x22, 0x28, 0x0a, 0x10, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x47, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xa9,
	0x02, 0x0a, 0x08, 0x43, 0x74, 0x72, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x03, 0x73,
	0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12,
	0x22, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x03,
	0x64, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x72, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x72,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x74, 0x72, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x4b, 0x0a, 0x0b, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x22, 0xed, 0x01, 0x0a, 0x0d, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x04, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x62,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x66, 0x66, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07,
	0x6f, 0x66, 0x66, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x56, 0x61,
	0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x56, 0x61, 0x6c,
	0x73, 0x22, 0xef, 0x01, 0x0a, 0x09, 0x42, 0x75, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x20, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x69, 0x70,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x69, 0x70,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x65, 0x72,
	0x49, 0x6e, 0x69, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x72,
	0x48, 0x61, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x70, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x22, 0x58, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x2c, 0x0a,
	0x0e, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x64, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x2a, 0x0a, 0x10, 0x54,
	0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x22, 0x3a, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6d, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6d,
	0x75, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x09, 0x41, 0x49, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62,
	0x2e, 0x41, 0x49, 0x50, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x64, 0x61, 0x79, 0x22, 0x88, 0x05, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a,
	0x03, 0x62, 0x75, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x62, 0x75, 0x79, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x65, 0x6c,
	0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x70, 0x62, 0x2e, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x6c,
	0x6f, 0x73, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x6c, 0x6f, 0x73, 0x73, 0x12, 0x38, 0x0a,
	0x0a, 0x74, 0x61, 0x6b, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x74,
	0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x61, 0x6b,
	0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x42, 0x75, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x75, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6c, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x65,
	0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x74, 0x6f, 0x70,
	0x4c, 0x6f, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x54,
	0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x6b, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x10, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x35,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x41,
	0x49, 0x50, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x70, 0x62, 0x2e, 0x41, 0x49, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x41, 0x49, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22,
	0xa6, 0x01, 0x0a, 0x0c, 0x50, 0x4e, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x70, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xf0, 0x09, 0x0a, 0x0c, 0x50, 0x4e, 0x4c,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x2f, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x50, 0x4e,
	0x4c, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x64,
	0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x64,
	0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x75, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x75, 0x70, 0x12, 0x2a,
	0x0a, 0x10, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61,
	0x77, 0x75, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x44, 0x72, 0x61, 0x77, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x54, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61, 0x77, 0x75, 0x70, 0x45, 0x6e, 0x64,
	0x54, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6e,
	0x6e, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x6e, 0x6e, 0x75,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x6c, 0x6f,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73,
	0x74, 0x6f, 0x70, 0x6c, 0x6f, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x61, 0x78, 0x55, 0x70, 0x44, 0x61, 0x79, 0x54, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6d, 0x61, 0x78, 0x55, 0x70, 0x44, 0x61, 0x79, 0x54, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x70, 0x44, 0x61, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x70, 0x44, 0x61, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x61, 0x79, 0x54, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x61, 0x79,
	0x54, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e,
	0x44, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x65,
	0x72, 0x44, 0x6f, 0x77, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x55,
	0x70, 0x57, 0x65, 0x65, 0x6b, 0x54, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x55, 0x70, 0x57, 0x65, 0x65, 0x6b, 0x54, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x50, 0x65, 0x72, 0x55, 0x70, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x70, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x24,
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x57, 0x65, 0x65, 0x6b, 0x54, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x57, 0x65,
	0x65, 0x6b, 0x54, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x44, 0x6f,
	0x77, 0x6e, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x50, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x55, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x55, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x70, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55,
	0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x77,
	0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x6d, 0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x44,
	0x6f, 0x77, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x55,
	0x70, 0x59, 0x65, 0x61, 0x72, 0x54, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x55, 0x70, 0x59, 0x65, 0x61, 0x72, 0x54, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x50, 0x65, 0x72, 0x55, 0x70, 0x59, 0x65, 0x61, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x70, 0x59, 0x65, 0x61, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x54, 0x73, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x59, 0x65,
	0x61, 0x72, 0x54, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x44, 0x6f,
	0x77, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x50, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2d, 0x0a, 0x07,
	0x6c, 0x73, 0x74, 0x43, 0x74, 0x72, 0x6c, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x74, 0x72, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x6c, 0x73, 0x74, 0x43, 0x74, 0x72, 0x6c, 0x22, 0xaf, 0x01, 0x0a, 0x07,
	0x50, 0x4e, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x50, 0x4e, 0x4c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x50, 0x4e, 0x4c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x74, 0x73, 0x22, 0xfc, 0x01,
	0x0a, 0x10, 0x53, 0x69, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x54, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x54, 0x73, 0x12, 0x33, 0x0a, 0x0a,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x49, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x74, 0x0a, 0x13, 0x53, 0x69, 0x6d, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x73, 0x22, 0x47, 0x0a,
	0x0f, 0x53, 0x69, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x34, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2a, 0x83, 0x01, 0x0a, 0x08, 0x43, 0x74, 0x72, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x54, 0x52, 0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x54, 0x52, 0x4c, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x54, 0x52, 0x4c, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x54, 0x52, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x4c, 0x4f, 0x53, 0x53,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x54, 0x52, 0x4c, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x54, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x54, 0x52, 0x4c, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x54,
	0x52, 0x4c, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x06, 0x2a, 0x34, 0x0a, 0x0b,
	0x41, 0x49, 0x50, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x49, 0x50, 0x54, 0x54, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x44, 0x41, 0x59, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x49, 0x50, 0x54, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x44, 0x41, 0x59,
	0x10, 0x01, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x7a, 0x68, 0x73, 0x30, 0x30, 0x37, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x64,
	0x62, 0x32, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trading2_proto_rawDescOnce sync.Once
	file_trading2_proto_rawDescData = file_trading2_proto_rawDesc
)

func file_trading2_proto_rawDescGZIP() []byte {
	file_trading2_proto_rawDescOnce.Do(func() {
		file_trading2_proto_rawDescData = protoimpl.X.CompressGZIP(file_trading2_proto_rawDescData)
	})
	return file_trading2_proto_rawDescData
}

var file_trading2_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_trading2_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_trading2_proto_goTypes = []interface{}{
	(CtrlType)(0),               // 0: tradingpb.CtrlType
	(AIPTimeType)(0),            // 1: tradingpb.AIPTimeType
	(*BasicRequestData)(nil),    // 2: tradingpb.BasicRequestData
	(*Asset)(nil),               // 3: tradingpb.Asset
	(*CtrlNode)(nil),            // 4: tradingpb.CtrlNode
	(*WalletAsset)(nil),         // 5: tradingpb.WalletAsset
	(*Wallet)(nil),              // 6: tradingpb.Wallet
	(*CtrlCondition)(nil),       // 7: tradingpb.CtrlCondition
	(*BuyParams)(nil),           // 8: tradingpb.BuyParams
	(*SellParams)(nil),          // 9: tradingpb.SellParams
	(*StopLossParams)(nil),      // 10: tradingpb.StopLossParams
	(*TakeProfitParams)(nil),    // 11: tradingpb.TakeProfitParams
	(*InitParams)(nil),          // 12: tradingpb.InitParams
	(*AIPParams)(nil),           // 13: tradingpb.AIPParams
	(*Strategy)(nil),            // 14: tradingpb.Strategy
	(*PNLDataValue)(nil),        // 15: tradingpb.PNLDataValue
	(*PNLAssetData)(nil),        // 16: tradingpb.PNLAssetData
	(*PNLData)(nil),             // 17: tradingpb.PNLData
	(*SimTradingParams)(nil),    // 18: tradingpb.SimTradingParams
	(*TradingNodeInfo)(nil),     // 19: tradingpb.TradingNodeInfo
	(*SimTradingCacheNode)(nil), // 20: tradingpb.SimTradingCacheNode
	(*SimTradingCache)(nil),     // 21: tradingpb.SimTradingCache
}
var file_trading2_proto_depIdxs = []int32{
	3,  // 0: tradingpb.CtrlNode.src:type_name -> tradingpb.Asset
	3,  // 1: tradingpb.CtrlNode.dst:type_name -> tradingpb.Asset
	0,  // 2: tradingpb.CtrlNode.type:type_name -> tradingpb.CtrlType
	3,  // 3: tradingpb.WalletAsset.asset:type_name -> tradingpb.Asset
	5,  // 4: tradingpb.Wallet.assets:type_name -> tradingpb.WalletAsset
	1,  // 5: tradingpb.AIPParams.type:type_name -> tradingpb.AIPTimeType
	3,  // 6: tradingpb.Strategy.asset:type_name -> tradingpb.Asset
	7,  // 7: tradingpb.Strategy.buy:type_name -> tradingpb.CtrlCondition
	7,  // 8: tradingpb.Strategy.sell:type_name -> tradingpb.CtrlCondition
	7,  // 9: tradingpb.Strategy.stoploss:type_name -> tradingpb.CtrlCondition
	7,  // 10: tradingpb.Strategy.takeprofit:type_name -> tradingpb.CtrlCondition
	8,  // 11: tradingpb.Strategy.paramsBuy:type_name -> tradingpb.BuyParams
	9,  // 12: tradingpb.Strategy.paramsSell:type_name -> tradingpb.SellParams
	10, // 13: tradingpb.Strategy.paramsStopLoss:type_name -> tradingpb.StopLossParams
	11, // 14: tradingpb.Strategy.paramsTakeProfit:type_name -> tradingpb.TakeProfitParams
	12, // 15: tradingpb.Strategy.paramsInit:type_name -> tradingpb.InitParams
	13, // 16: tradingpb.Strategy.paramsAIP:type_name -> tradingpb.AIPParams
	3,  // 17: tradingpb.PNLAssetData.asset:type_name -> tradingpb.Asset
	15, // 18: tradingpb.PNLAssetData.values:type_name -> tradingpb.PNLDataValue
	4,  // 19: tradingpb.PNLAssetData.lstCtrl:type_name -> tradingpb.CtrlNode
	16, // 20: tradingpb.PNLData.total:type_name -> tradingpb.PNLAssetData
	16, // 21: tradingpb.PNLData.assets:type_name -> tradingpb.PNLAssetData
	3,  // 22: tradingpb.SimTradingParams.assets:type_name -> tradingpb.Asset
	3,  // 23: tradingpb.SimTradingParams.baselines:type_name -> tradingpb.Asset
	14, // 24: tradingpb.SimTradingParams.strategies:type_name -> tradingpb.Strategy
	6,  // 25: tradingpb.SimTradingParams.wallet:type_name -> tradingpb.Wallet
	18, // 26: tradingpb.SimTradingCacheNode.params:type_name -> tradingpb.SimTradingParams
	20, // 27: tradingpb.SimTradingCache.nodes:type_name -> tradingpb.SimTradingCacheNode
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_trading2_proto_init() }
func file_trading2_proto_init() {
	if File_trading2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trading2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtrlNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtrlCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopLossParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeProfitParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AIPParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Strategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PNLDataValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PNLAssetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PNLData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimTradingParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingNodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimTradingCacheNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trading2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimTradingCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trading2_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trading2_proto_goTypes,
		DependencyIndexes: file_trading2_proto_depIdxs,
		EnumInfos:         file_trading2_proto_enumTypes,
		MessageInfos:      file_trading2_proto_msgTypes,
	}.Build()
	File_trading2_proto = out.File
	file_trading2_proto_rawDesc = nil
	file_trading2_proto_goTypes = nil
	file_trading2_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tradingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradingNode2Client is the client API for TradingNode2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingNode2Client interface {
	// getServerInfo - get server infomation
	GetServerInfo(ctx context.Context, in *RequestServerInfo, opts ...grpc.CallOption) (*ReplyServerInfo, error)
	// calcPNL - calc PNL
	CalcPNL(ctx context.Context, in *RequestCalcPNL, opts ...grpc.CallOption) (*ReplyCalcPNL, error)
}

type tradingNode2Client struct {
	cc grpc.ClientConnInterface
}

func NewTradingNode2Client(cc grpc.ClientConnInterface) TradingNode2Client {
	return &tradingNode2Client{cc}
}

func (c *tradingNode2Client) GetServerInfo(ctx context.Context, in *RequestServerInfo, opts ...grpc.CallOption) (*ReplyServerInfo, error) {
	out := new(ReplyServerInfo)
	err := c.cc.Invoke(ctx, "/tradingpb.TradingNode2/getServerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingNode2Client) CalcPNL(ctx context.Context, in *RequestCalcPNL, opts ...grpc.CallOption) (*ReplyCalcPNL, error) {
	out := new(ReplyCalcPNL)
	err := c.cc.Invoke(ctx, "/tradingpb.TradingNode2/calcPNL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingNode2Server is the server API for TradingNode2 service.
// All implementations must embed UnimplementedTradingNode2Server
// for forward compatibility
type TradingNode2Server interface {
	// getServerInfo - get server infomation
	GetServerInfo(context.Context, *RequestServerInfo) (*ReplyServerInfo, error)
	// calcPNL - calc PNL
	CalcPNL(context.Context, *RequestCalcPNL) (*ReplyCalcPNL, error)
	mustEmbedUnimplementedTradingNode2Server()
}

// UnimplementedTradingNode2Server must be embedded to have forward compatible implementations.
type UnimplementedTradingNode2Server struct {
}

func (UnimplementedTradingNode2Server) GetServerInfo(context.Context, *RequestServerInfo) (*ReplyServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedTradingNode2Server) CalcPNL(context.Context, *RequestCalcPNL) (*ReplyCalcPNL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcPNL not implemented")
}
func (UnimplementedTradingNode2Server) mustEmbedUnimplementedTradingNode2Server() {}

// UnsafeTradingNode2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingNode2Server will
// result in compilation errors.
type UnsafeTradingNode2Server interface {
	mustEmbedUnimplementedTradingNode2Server()
}

func RegisterTradingNode2Server(s grpc.ServiceRegistrar, srv TradingNode2Server) {
	s.RegisterService(&TradingNode2_ServiceDesc, srv)
}

func _TradingNode2_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestServerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingNode2Server).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tradingpb.TradingNode2/getServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingNode2Server).GetServerInfo(ctx, req.(*RequestServerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingNode2_CalcPNL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCalcPNL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingNode2Server).CalcPNL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tradingpb.TradingNode2/calcPNL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingNode2Server).CalcPNL(ctx, req.(*RequestCalcPNL))
	}
	return interceptor(ctx, in, info, handler)
}

// TradingNode2_ServiceDesc is the grpc.ServiceDesc for TradingNode2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradingNode2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tradingpb.TradingNode2",
	HandlerType: (*TradingNode2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getServerInfo",
			Handler:    _TradingNode2_GetServerInfo_Handler,
		},
		{
			MethodName: "calcPNL",
			Handler:    _TradingNode2_CalcPNL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tradingnode2.proto",
}
